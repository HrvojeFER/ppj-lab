from LAB1 import Lexer

rules = list()

commands = list()
commands.append('-')
rules.append(Lexer.RegexRule('S_pocetno', '\\t|\\_', commands))
commands = list()
commands.append('-')
commands.append('NOVI_REDAK')
rules.append(Lexer.RegexRule('S_pocetno', '\\n', commands))
commands = list()
commands.append('-')
commands.append('UDJI_U_STANJE S_jednolinijskiKomentar')
rules.append(Lexer.RegexRule('S_pocetno', '//', commands))
commands = list()
commands.append('-')
commands.append('NOVI_REDAK')
commands.append('UDJI_U_STANJE S_pocetno')
rules.append(Lexer.RegexRule('S_jednolinijskiKomentar', '\\n', commands))
commands = list()
commands.append('-')
rules.append(Lexer.RegexRule('S_jednolinijskiKomentar', '(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\t|\\n|\\_|!|"|#|%|&|\'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)', commands))
commands = list()
commands.append('-')
commands.append('UDJI_U_STANJE S_komentar')
rules.append(Lexer.RegexRule('S_pocetno', '/\\*', commands))
commands = list()
commands.append('-')
commands.append('UDJI_U_STANJE S_pocetno')
rules.append(Lexer.RegexRule('S_komentar', '\\*/', commands))
commands = list()
commands.append('-')
commands.append('NOVI_REDAK')
rules.append(Lexer.RegexRule('S_komentar', '\\n', commands))
commands = list()
commands.append('-')
rules.append(Lexer.RegexRule('S_komentar', '(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\t|\\n|\\_|!|"|#|%|&|\'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)', commands))
commands = list()
commands.append('-')
commands.append('UDJI_U_STANJE S_string')
commands.append('VRATI_SE 0')
rules.append(Lexer.RegexRule('S_pocetno', '"', commands))
commands = list()
commands.append('NIZ_ZNAKOVA')
commands.append('UDJI_U_STANJE S_pocetno')
rules.append(Lexer.RegexRule('S_string', '"((\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\t|\\_|!|#|%|&|\'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)|\\\\")*"', commands))
commands = list()
commands.append('KR_BREAK')
rules.append(Lexer.RegexRule('S_pocetno', 'break', commands))
commands = list()
commands.append('KR_CHAR')
rules.append(Lexer.RegexRule('S_pocetno', 'char', commands))
commands = list()
commands.append('KR_CONST')
rules.append(Lexer.RegexRule('S_pocetno', 'const', commands))
commands = list()
commands.append('KR_CONTINUE')
rules.append(Lexer.RegexRule('S_pocetno', 'continue', commands))
commands = list()
commands.append('KR_ELSE')
rules.append(Lexer.RegexRule('S_pocetno', 'else', commands))
commands = list()
commands.append('KR_FOR')
rules.append(Lexer.RegexRule('S_pocetno', 'for', commands))
commands = list()
commands.append('KR_IF')
rules.append(Lexer.RegexRule('S_pocetno', 'if', commands))
commands = list()
commands.append('KR_INT')
rules.append(Lexer.RegexRule('S_pocetno', 'int', commands))
commands = list()
commands.append('KR_RETURN')
rules.append(Lexer.RegexRule('S_pocetno', 'return', commands))
commands = list()
commands.append('KR_VOID')
rules.append(Lexer.RegexRule('S_pocetno', 'void', commands))
commands = list()
commands.append('KR_WHILE')
rules.append(Lexer.RegexRule('S_pocetno', 'while', commands))
commands = list()
commands.append('IDN')
rules.append(Lexer.RegexRule('S_pocetno', '(_|(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z))(_|(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z)|(0|1|2|3|4|5|6|7|8|9))*', commands))
commands = list()
commands.append('BROJ')
rules.append(Lexer.RegexRule('S_pocetno', '(0|1|2|3|4|5|6|7|8|9)(0|1|2|3|4|5|6|7|8|9)*', commands))
commands = list()
commands.append('BROJ')
rules.append(Lexer.RegexRule('S_pocetno', '0(X|x)((0|1|2|3|4|5|6|7|8|9)|a|b|c|d|e|f|A|B|C|D|E|F)((0|1|2|3|4|5|6|7|8|9)|a|b|c|d|e|f|A|B|C|D|E|F)*', commands))
commands = list()
commands.append('ZNAK')
rules.append(Lexer.RegexRule('S_pocetno', '\'(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\_|!|"|#|%|&|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)\'', commands))
commands = list()
commands.append('ZNAK')
rules.append(Lexer.RegexRule('S_pocetno', '\'\\\\(\\(|\\)|\\{|\\}|\\||\\*|\\\\|\\$|\\_|!|"|#|%|&|\'|+|,|-|.|/|0|1|2|3|4|5|6|7|8|9|:|;|<|=|>|?|@|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|[|]|^|_|`|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|~)\'', commands))
commands = list()
commands.append('OP_INC')
rules.append(Lexer.RegexRule('S_pocetno', '++', commands))
commands = list()
commands.append('OP_DEC')
rules.append(Lexer.RegexRule('S_pocetno', '--', commands))
commands = list()
commands.append('PLUS')
rules.append(Lexer.RegexRule('S_pocetno', '+', commands))
commands = list()
commands.append('MINUS')
rules.append(Lexer.RegexRule('S_pocetno', '-', commands))
commands = list()
commands.append('OP_PUTA')
rules.append(Lexer.RegexRule('S_pocetno', '\\*', commands))
commands = list()
commands.append('OP_DIJELI')
rules.append(Lexer.RegexRule('S_pocetno', '/', commands))
commands = list()
commands.append('OP_MOD')
rules.append(Lexer.RegexRule('S_pocetno', '%', commands))
commands = list()
commands.append('OP_PRIDRUZI')
rules.append(Lexer.RegexRule('S_pocetno', '=', commands))
commands = list()
commands.append('OP_LT')
rules.append(Lexer.RegexRule('S_pocetno', '<', commands))
commands = list()
commands.append('OP_LTE')
rules.append(Lexer.RegexRule('S_pocetno', '<=', commands))
commands = list()
commands.append('OP_GT')
rules.append(Lexer.RegexRule('S_pocetno', '>', commands))
commands = list()
commands.append('OP_GTE')
rules.append(Lexer.RegexRule('S_pocetno', '>=', commands))
commands = list()
commands.append('OP_EQ')
rules.append(Lexer.RegexRule('S_pocetno', '==', commands))
commands = list()
commands.append('OP_NEQ')
rules.append(Lexer.RegexRule('S_pocetno', '!=', commands))
commands = list()
commands.append('OP_NEG')
rules.append(Lexer.RegexRule('S_pocetno', '!', commands))
commands = list()
commands.append('OP_TILDA')
rules.append(Lexer.RegexRule('S_pocetno', '~', commands))
commands = list()
commands.append('OP_I')
rules.append(Lexer.RegexRule('S_pocetno', '&&', commands))
commands = list()
commands.append('OP_ILI')
rules.append(Lexer.RegexRule('S_pocetno', '\\|\\|', commands))
commands = list()
commands.append('OP_BIN_I')
rules.append(Lexer.RegexRule('S_pocetno', '&', commands))
commands = list()
commands.append('OP_BIN_ILI')
rules.append(Lexer.RegexRule('S_pocetno', '\\|', commands))
commands = list()
commands.append('OP_BIN_XILI')
rules.append(Lexer.RegexRule('S_pocetno', '^', commands))
commands = list()
commands.append('ZAREZ')
rules.append(Lexer.RegexRule('S_pocetno', ',', commands))
commands = list()
commands.append('TOCKAZAREZ')
rules.append(Lexer.RegexRule('S_pocetno', ';', commands))
commands = list()
commands.append('L_ZAGRADA')
rules.append(Lexer.RegexRule('S_pocetno', '\\(', commands))
commands = list()
commands.append('D_ZAGRADA')
rules.append(Lexer.RegexRule('S_pocetno', '\\)', commands))
commands = list()
commands.append('L_VIT_ZAGRADA')
rules.append(Lexer.RegexRule('S_pocetno', '\\{', commands))
commands = list()
commands.append('D_VIT_ZAGRADA')
rules.append(Lexer.RegexRule('S_pocetno', '\\}', commands))
commands = list()
commands.append('L_UGL_ZAGRADA')
rules.append(Lexer.RegexRule('S_pocetno', '[', commands))
commands = list()
commands.append('D_UGL_ZAGRADA')
rules.append(Lexer.RegexRule('S_pocetno', ']', commands))

program = Lexer.get_program_line()
lexer = Lexer.Lexer(rules, 'S_pocetno')
Lexer.print_char_table(lexer.get_char_table(program))

